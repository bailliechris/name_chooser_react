import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { login, logoutUser } from './dbApi';

const initialState = {
  user: {},
  classes: [],
  isAuth: false,
  status: 'Waiting for sign-in'
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const signIn = createAsyncThunk(
  'users/login',
  async (details) => {
    console.log('Async Thunk');
    const res = await login(details);
    // The value we return becomes the `fulfilled` action payload
    return res;
  }
);

export const signOut = createAsyncThunk(
  'users/logoutUser',
  async () => {
    console.log('Async Logout');
    const res = await logoutUser();

    return res;
  }
)

export const userSlice = createSlice({
  name: 'users',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setUser: (state, action) => {
      state.user = {
        user : action.payload.data.user,
        _id : action.payload.data._id
      }
    },
    setClasses: (state, action) => {
      state.classes = [...action.payload.data];
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(signIn.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(signIn.fulfilled, (state, action) => {
        console.log('Data Assigned');
        state.user.user = action.payload.data.user;
        state.user._id = action.payload.data._id;
        state.status = 'loaded';
        state.isAuth = true;
        state.classes = action.payload.data.classes;
      })
      .addCase(signOut.fulfilled, (state, action) => {
        console.log(action.payload);
        if (action.payload.data === 200) {
          state.user = {};
          state.classes = [];
          state.isAuth = false;
          state.status = 'Waiting for sign-in';
        }
      });
  },
});

export const { setUser, setClasses } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const getClasses = (state) => state.user.classes;

export default userSlice.reducer;
